"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = createPrefixTransform;

var _stream = require("stream");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

var ALL_BR = /\n/g;

/**
 * The transform stream to insert a specific prefix.
 *
 * Several streams can exist for the same output stream.
 * This stream will insert the prefix if the last output came from other instance.
 * To do that, this stream is using a shared state object.
 *
 * @private
 */
/**
 * @author Toru Nagashima
 * @copyright 2016 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var PrefixTransform = function (_Transform) {
  (0, _inherits3.default)(PrefixTransform, _Transform);

  /**
   * @param {string} prefix - A prefix text to be inserted.
   * @param {object} state - A state object.
   * @param {string} state.lastPrefix - The last prefix which is printed.
   * @param {boolean} state.lastIsLinebreak -The flag to check whether the last output is a line break or not.
   */

  function PrefixTransform(prefix, state) {
    (0, _classCallCheck3.default)(this, PrefixTransform);

    var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(PrefixTransform).call(this));

    _this.prefix = prefix;
    _this.state = state;
    return _this;
  }

  /**
   * Transforms the output chunk.
   *
   * @param {string|Buffer} chunk - A chunk to be transformed.
   * @param {string} encoding - The encoding of the chunk.
   * @param {function} callback - A callback function that is called when done.
   * @returns {void}
   */


  (0, _createClass3.default)(PrefixTransform, [{
    key: "_transform",
    value: function _transform(chunk, encoding, callback) {
      var prefix = this.prefix;
      var nPrefix = "\n" + prefix;
      var state = this.state;
      var firstPrefix = state.lastIsLinebreak ? prefix : state.lastPrefix !== prefix ? "\n" :
      /* otherwise */"";
      var prefixed = ("" + firstPrefix + chunk).replace(ALL_BR, nPrefix);
      var index = prefixed.indexOf(prefix, Math.max(0, prefixed.length - prefix.length));

      state.lastPrefix = prefix;
      state.lastIsLinebreak = index !== -1;

      callback(null, index !== -1 ? prefixed.slice(0, index) : prefixed);
    }
  }]);
  return PrefixTransform;
}(_stream.Transform);

//------------------------------------------------------------------------------
// Public API
//------------------------------------------------------------------------------

/**
 * Create a transform stream to insert the specific prefix.
 *
 * Several streams can exist for the same output stream.
 * This stream will insert the prefix if the last output came from other instance.
 * To do that, this stream is using a shared state object.
 *
 * @param {string} prefix - A prefix text to be inserted.
 * @param {object} state - A state object.
 * @param {string} state.lastPrefix - The last prefix which is printed.
 * @param {boolean} state.lastIsLinebreak -The flag to check whether the last output is a line break or not.
 * @returns {stream.Transform} The created transform stream.
 */


function createPrefixTransform(prefix, state) {
  return new PrefixTransform(prefix, state);
}