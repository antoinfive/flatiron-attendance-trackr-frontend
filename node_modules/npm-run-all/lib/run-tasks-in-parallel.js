"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

exports.default = runTasksInParallel;

var _runTask = require("./run-task");

var _runTask2 = _interopRequireDefault(_runTask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Run npm-scripts of given names in parallel.
 *
 * If a npm-script exited with a non-zero code, this aborts other all npm-scripts.
 *
 * @param {string} tasks - A list of npm-script name to run in parallel.
 * @param {object} options - An option object.
 * @returns {Promise} A promise object which becomes fullfilled when all npm-scripts are completed.
 * @private
 */
function runTasksInParallel(tasks, options) {
    var taskPromises = tasks.map(function (task) {
        return (0, _runTask2.default)(task, options);
    });
    if (options.continueOnError) {
        return _promise2.default.all(taskPromises);
    }

    // When one of tasks exited with non-zero, abort all tasks.
    // And wait for all tasks exit.
    var nonZeroExited = null;
    var parallelPromise = _promise2.default.all(taskPromises.map(function (p) {
        return p.then(function (item) {
            if (nonZeroExited == null && item.code) {
                nonZeroExited = nonZeroExited || item;
                taskPromises.forEach(function (t) {
                    t.abort();
                });
            }
        });
    }));
    parallelPromise.catch(function () {
        taskPromises.forEach(function (t) {
            t.abort();
        });
    });

    // Make fail if there are tasks that exited non-zero.
    return parallelPromise.then(function () {
        if (nonZeroExited != null) {
            throw new Error(nonZeroExited.task + ": None-Zero Exit(" + nonZeroExited.code + ");");
        }
    });
} /**
   * @author Toru Nagashima
   * @copyright 2015 Toru Nagashima. All rights reserved.
   * See LICENSE file in root directory for full license.
   */