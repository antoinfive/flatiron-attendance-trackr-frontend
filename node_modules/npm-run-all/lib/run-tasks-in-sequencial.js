"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

exports.default = runTasksInSequencial;

var _runTask = require("./run-task");

var _runTask2 = _interopRequireDefault(_runTask);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var START_PROMISE = _promise2.default.resolve({ code: 0 });

/**
 * Throws an error if a given result indicates non-zero exit.
 *
 * @param {{task: string, code: number}} result - A result object.
 * @returns {void}
 */
/**
 * @author Toru Nagashima
 * @copyright 2015 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */
function rejectIfNonZeroExit(result) {
    if (result.code) {
        throw new Error(result.task + ": None-Zero Exit(" + result.code + ");");
    }
}

/**
 * Run npm-scripts of given names in sequencial.
 *
 * If a npm-script exited with a non-zero code, this aborts subsequent npm-scripts.
 *
 * @param {string} tasks - A list of npm-script name to run in sequencial.
 * @param {object} options - An option object.
 * @returns {Promise} A promise object which becomes fullfilled when all npm-scripts are completed.
 * @private
 */
function runTasksInSequencial(tasks, options) {
    if (options.continueOnError) {
        return tasks.reduce(function (prev, task) {
            return prev.then(function () {
                return (0, _runTask2.default)(task, options);
            });
        }, START_PROMISE);
    }

    return tasks.reduce(function (prev, task) {
        return prev.then(function (result) {
            rejectIfNonZeroExit(result);
            return (0, _runTask2.default)(task, options);
        });
    }, START_PROMISE).then(rejectIfNonZeroExit);
}