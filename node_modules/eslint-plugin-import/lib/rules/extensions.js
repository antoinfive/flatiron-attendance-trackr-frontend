'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('../core/resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _lodash = require('lodash.endswith');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (context) {
  var configuration = context.options[0] || 'never';

  function isUseOfExtensionEnforced(extension) {
    if ((typeof configuration === 'undefined' ? 'undefined' : _typeof(configuration)) === 'object') {
      return configuration[extension] === 'always';
    }

    return configuration === 'always';
  }

  function isResolvableWithoutExtension(file) {
    var extension = _path2.default.extname(file);
    var fileWithoutExtension = file.slice(0, -extension.length);
    var resolvedFileWithoutExtension = (0, _resolve2.default)(fileWithoutExtension, context);

    return resolvedFileWithoutExtension === (0, _resolve2.default)(file, context);
  }

  function checkFileExtension(node) {
    var source = node.source;

    var importPath = source.value;
    var resolvedPath = (0, _resolve2.default)(importPath, context);
    var extension = _path2.default.extname(resolvedPath).substring(1);

    if (!(0, _lodash2.default)(importPath, extension)) {
      if (isUseOfExtensionEnforced(extension)) {
        context.report({
          node: source,
          message: 'Missing file extension "' + extension + '" for "' + importPath + '"'
        });
      }
    } else {
      if (!isUseOfExtensionEnforced(extension) && isResolvableWithoutExtension(importPath)) {
        context.report({
          node: source,
          message: 'Unexpected use of file extension "' + extension + '" for "' + importPath + '"'
        });
      }
    }
  }

  return {
    ImportDeclaration: checkFileExtension
  };
};

module.exports.schema = [{
  oneOf: [{
    enum: ['always', 'never']
  }, {
    type: 'object',
    patternProperties: {
      '.*': { enum: ['always', 'never'] }
    }
  }]
}];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL2V4dGVuc2lvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLFVBQVUsT0FBVixFQUFtQjtBQUNsQyxNQUFNLGdCQUFnQixRQUFRLE9BQVIsQ0FBZ0IsQ0FBaEIsS0FBc0IsT0FBdEIsQ0FEWTs7QUFHbEMsV0FBUyx3QkFBVCxDQUFrQyxTQUFsQyxFQUE2QztBQUMzQyxRQUFJLFFBQU8scUVBQVAsS0FBeUIsUUFBekIsRUFBbUM7QUFDckMsYUFBTyxjQUFjLFNBQWQsTUFBNkIsUUFBN0IsQ0FEOEI7S0FBdkM7O0FBSUEsV0FBTyxrQkFBa0IsUUFBbEIsQ0FMb0M7R0FBN0M7O0FBUUEsV0FBUyw0QkFBVCxDQUFzQyxJQUF0QyxFQUE0QztBQUMxQyxRQUFNLFlBQVksZUFBSyxPQUFMLENBQWEsSUFBYixDQUFaLENBRG9DO0FBRTFDLFFBQU0sdUJBQXVCLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFDLFVBQVUsTUFBVixDQUF0QyxDQUZvQztBQUcxQyxRQUFNLCtCQUErQix1QkFBUSxvQkFBUixFQUE4QixPQUE5QixDQUEvQixDQUhvQzs7QUFLMUMsV0FBTyxpQ0FBaUMsdUJBQVEsSUFBUixFQUFjLE9BQWQsQ0FBakMsQ0FMbUM7R0FBNUM7O0FBUUEsV0FBUyxrQkFBVCxDQUE0QixJQUE1QixFQUFrQztRQUN4QixTQUFXLEtBQVgsT0FEd0I7O0FBRWhDLFFBQU0sYUFBYSxPQUFPLEtBQVAsQ0FGYTtBQUdoQyxRQUFNLGVBQWUsdUJBQVEsVUFBUixFQUFvQixPQUFwQixDQUFmLENBSDBCO0FBSWhDLFFBQU0sWUFBWSxlQUFLLE9BQUwsQ0FBYSxZQUFiLEVBQTJCLFNBQTNCLENBQXFDLENBQXJDLENBQVosQ0FKMEI7O0FBTWhDLFFBQUksQ0FBQyxzQkFBUyxVQUFULEVBQXFCLFNBQXJCLENBQUQsRUFBa0M7QUFDcEMsVUFBSSx5QkFBeUIsU0FBekIsQ0FBSixFQUF5QztBQUN2QyxnQkFBUSxNQUFSLENBQWU7QUFDYixnQkFBTSxNQUFOO0FBQ0EsZ0RBQW9DLHdCQUFtQixnQkFBdkQ7U0FGRixFQUR1QztPQUF6QztLQURGLE1BT087QUFDTCxVQUFJLENBQUMseUJBQXlCLFNBQXpCLENBQUQsSUFBd0MsNkJBQTZCLFVBQTdCLENBQXhDLEVBQWtGO0FBQ3BGLGdCQUFRLE1BQVIsQ0FBZTtBQUNiLGdCQUFNLE1BQU47QUFDQSwwREFBOEMsd0JBQW1CLGdCQUFqRTtTQUZGLEVBRG9GO09BQXRGO0tBUkY7R0FORjs7QUF1QkEsU0FBTztBQUNMLHVCQUFtQixrQkFBbkI7R0FERixDQTFDa0M7Q0FBbkI7O0FBK0NqQixPQUFPLE9BQVAsQ0FBZSxNQUFmLEdBQXdCLENBQ3RCO0FBQ0UsU0FBTyxDQUNMO0FBQ0UsVUFBTSxDQUFFLFFBQUYsRUFBWSxPQUFaLENBQU47R0FGRyxFQUlMO0FBQ0UsVUFBTSxRQUFOO0FBQ0EsdUJBQW1CO0FBQ2pCLFlBQU0sRUFBRSxNQUFNLENBQUUsUUFBRixFQUFZLE9BQVosQ0FBTixFQUFSO0tBREY7R0FORyxDQUFQO0NBRm9CLENBQXhCIiwiZmlsZSI6InJ1bGVzL2V4dGVuc2lvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHJlc29sdmUgZnJvbSAnLi4vY29yZS9yZXNvbHZlJ1xuaW1wb3J0IGVuZHNXaXRoIGZyb20gJ2xvZGFzaC5lbmRzd2l0aCdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICBjb25zdCBjb25maWd1cmF0aW9uID0gY29udGV4dC5vcHRpb25zWzBdIHx8ICduZXZlcidcblxuICBmdW5jdGlvbiBpc1VzZU9mRXh0ZW5zaW9uRW5mb3JjZWQoZXh0ZW5zaW9uKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWd1cmF0aW9uID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGNvbmZpZ3VyYXRpb25bZXh0ZW5zaW9uXSA9PT0gJ2Fsd2F5cydcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlndXJhdGlvbiA9PT0gJ2Fsd2F5cydcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUmVzb2x2YWJsZVdpdGhvdXRFeHRlbnNpb24oZmlsZSkge1xuICAgIGNvbnN0IGV4dGVuc2lvbiA9IHBhdGguZXh0bmFtZShmaWxlKVxuICAgIGNvbnN0IGZpbGVXaXRob3V0RXh0ZW5zaW9uID0gZmlsZS5zbGljZSgwLCAtZXh0ZW5zaW9uLmxlbmd0aClcbiAgICBjb25zdCByZXNvbHZlZEZpbGVXaXRob3V0RXh0ZW5zaW9uID0gcmVzb2x2ZShmaWxlV2l0aG91dEV4dGVuc2lvbiwgY29udGV4dClcblxuICAgIHJldHVybiByZXNvbHZlZEZpbGVXaXRob3V0RXh0ZW5zaW9uID09PSByZXNvbHZlKGZpbGUsIGNvbnRleHQpXG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0ZpbGVFeHRlbnNpb24obm9kZSkge1xuICAgIGNvbnN0IHsgc291cmNlIH0gPSBub2RlXG4gICAgY29uc3QgaW1wb3J0UGF0aCA9IHNvdXJjZS52YWx1ZVxuICAgIGNvbnN0IHJlc29sdmVkUGF0aCA9IHJlc29sdmUoaW1wb3J0UGF0aCwgY29udGV4dClcbiAgICBjb25zdCBleHRlbnNpb24gPSBwYXRoLmV4dG5hbWUocmVzb2x2ZWRQYXRoKS5zdWJzdHJpbmcoMSlcblxuICAgIGlmICghZW5kc1dpdGgoaW1wb3J0UGF0aCwgZXh0ZW5zaW9uKSkge1xuICAgICAgaWYgKGlzVXNlT2ZFeHRlbnNpb25FbmZvcmNlZChleHRlbnNpb24pKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0KHtcbiAgICAgICAgICBub2RlOiBzb3VyY2UsXG4gICAgICAgICAgbWVzc2FnZTogYE1pc3NpbmcgZmlsZSBleHRlbnNpb24gXCIke2V4dGVuc2lvbn1cIiBmb3IgXCIke2ltcG9ydFBhdGh9XCJgLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlzVXNlT2ZFeHRlbnNpb25FbmZvcmNlZChleHRlbnNpb24pICYmIGlzUmVzb2x2YWJsZVdpdGhvdXRFeHRlbnNpb24oaW1wb3J0UGF0aCkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnQoe1xuICAgICAgICAgIG5vZGU6IHNvdXJjZSxcbiAgICAgICAgICBtZXNzYWdlOiBgVW5leHBlY3RlZCB1c2Ugb2YgZmlsZSBleHRlbnNpb24gXCIke2V4dGVuc2lvbn1cIiBmb3IgXCIke2ltcG9ydFBhdGh9XCJgLFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgSW1wb3J0RGVjbGFyYXRpb246IGNoZWNrRmlsZUV4dGVuc2lvbixcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5zY2hlbWEgPSBbXG4gIHtcbiAgICBvbmVPZjogW1xuICAgICAge1xuICAgICAgICBlbnVtOiBbICdhbHdheXMnLCAnbmV2ZXInIF0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgcGF0dGVyblByb3BlcnRpZXM6IHtcbiAgICAgICAgICAnLionOiB7IGVudW06IFsgJ2Fsd2F5cycsICduZXZlcicgXSB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdLFxuICB9LFxuXVxuIl19