'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _pkgUp = require('pkg-up');

var _pkgUp2 = _interopRequireDefault(_pkgUp);

var _importType = require('../core/importType');

var _importType2 = _interopRequireDefault(_importType);

var _staticRequire = require('../core/staticRequire');

var _staticRequire2 = _interopRequireDefault(_staticRequire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getDependencies(context) {
  var filepath = _pkgUp2.default.sync(context.getFilename());
  if (!filepath) {
    return null;
  }

  try {
    var packageContent = JSON.parse(_fs2.default.readFileSync(filepath, 'utf8'));
    return {
      dependencies: packageContent.dependencies || {},
      devDependencies: packageContent.devDependencies || {}
    };
  } catch (e) {
    return null;
  }
}

function missingErrorMessage(packageName) {
  return '\'' + packageName + '\' is not listed in the project\'s dependencies. ' + ('Run \'npm i -S ' + packageName + '\' to add it');
}

function devDepErrorMessage(packageName) {
  return '\'' + packageName + '\' is not listed in the project\'s dependencies, not devDependencies.';
}

function reportIfMissing(context, deps, allowDevDeps, node, name) {
  if ((0, _importType2.default)(name, context) !== 'external') {
    return;
  }
  var packageName = name.split('/')[0];

  if (deps.dependencies[packageName] === undefined) {
    if (!allowDevDeps) {
      context.report(node, devDepErrorMessage(packageName));
    } else if (deps.devDependencies[packageName] === undefined) {
      context.report(node, missingErrorMessage(packageName));
    }
  }
}

module.exports = function (context) {
  var options = context.options[0] || {};
  var allowDevDeps = options.devDependencies !== false;
  var deps = getDependencies(context);

  if (!deps) {
    return {};
  }

  // todo: use module visitor from module-utils core
  return {
    ImportDeclaration: function ImportDeclaration(node) {
      reportIfMissing(context, deps, allowDevDeps, node, node.source.value);
    },
    CallExpression: function handleRequires(node) {
      if ((0, _staticRequire2.default)(node)) {
        reportIfMissing(context, deps, allowDevDeps, node, node.arguments[0].value);
      }
    }
  };
};

module.exports.schema = [{
  'type': 'object',
  'properties': {
    'devDependencies': { 'type': 'boolean' }
  },
  'additionalProperties': false
}];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzL25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLFNBQVMsZUFBVCxDQUF5QixPQUF6QixFQUFrQztBQUNoQyxNQUFNLFdBQVcsZ0JBQU0sSUFBTixDQUFXLFFBQVEsV0FBUixFQUFYLENBQVgsQ0FEMEI7QUFFaEMsTUFBSSxDQUFDLFFBQUQsRUFBVztBQUNiLFdBQU8sSUFBUCxDQURhO0dBQWY7O0FBSUEsTUFBSTtBQUNGLFFBQU0saUJBQWlCLEtBQUssS0FBTCxDQUFXLGFBQUcsWUFBSCxDQUFnQixRQUFoQixFQUEwQixNQUExQixDQUFYLENBQWpCLENBREo7QUFFRixXQUFPO0FBQ0wsb0JBQWMsZUFBZSxZQUFmLElBQStCLEVBQS9CO0FBQ2QsdUJBQWlCLGVBQWUsZUFBZixJQUFrQyxFQUFsQztLQUZuQixDQUZFO0dBQUosQ0FNRSxPQUFPLENBQVAsRUFBVTtBQUNWLFdBQU8sSUFBUCxDQURVO0dBQVY7Q0FaSjs7QUFpQkEsU0FBUyxtQkFBVCxDQUE2QixXQUE3QixFQUEwQztBQUN4QyxTQUFPLE9BQUksaUVBQUosd0JBQ1UsNkJBRFYsQ0FEaUM7Q0FBMUM7O0FBS0EsU0FBUyxrQkFBVCxDQUE0QixXQUE1QixFQUF5QztBQUN2QyxnQkFBVyxxRkFBWCxDQUR1QztDQUF6Qzs7QUFJQSxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBa0MsSUFBbEMsRUFBd0MsWUFBeEMsRUFBc0QsSUFBdEQsRUFBNEQsSUFBNUQsRUFBa0U7QUFDaEUsTUFBSSwwQkFBVyxJQUFYLEVBQWlCLE9BQWpCLE1BQThCLFVBQTlCLEVBQTBDO0FBQzVDLFdBRDRDO0dBQTlDO0FBR0EsTUFBTSxjQUFjLEtBQUssS0FBTCxDQUFXLEdBQVgsRUFBZ0IsQ0FBaEIsQ0FBZCxDQUowRDs7QUFNaEUsTUFBSSxLQUFLLFlBQUwsQ0FBa0IsV0FBbEIsTUFBbUMsU0FBbkMsRUFBOEM7QUFDaEQsUUFBSSxDQUFDLFlBQUQsRUFBZTtBQUNqQixjQUFRLE1BQVIsQ0FBZSxJQUFmLEVBQXFCLG1CQUFtQixXQUFuQixDQUFyQixFQURpQjtLQUFuQixNQUVPLElBQUksS0FBSyxlQUFMLENBQXFCLFdBQXJCLE1BQXNDLFNBQXRDLEVBQWlEO0FBQzFELGNBQVEsTUFBUixDQUFlLElBQWYsRUFBcUIsb0JBQW9CLFdBQXBCLENBQXJCLEVBRDBEO0tBQXJEO0dBSFQ7Q0FORjs7QUFlQSxPQUFPLE9BQVAsR0FBaUIsVUFBVSxPQUFWLEVBQW1CO0FBQ2xDLE1BQU0sVUFBVSxRQUFRLE9BQVIsQ0FBZ0IsQ0FBaEIsS0FBc0IsRUFBdEIsQ0FEa0I7QUFFbEMsTUFBTSxlQUFlLFFBQVEsZUFBUixLQUE0QixLQUE1QixDQUZhO0FBR2xDLE1BQU0sT0FBTyxnQkFBZ0IsT0FBaEIsQ0FBUCxDQUg0Qjs7QUFLbEMsTUFBSSxDQUFDLElBQUQsRUFBTztBQUNULFdBQU8sRUFBUCxDQURTO0dBQVg7OztBQUxrQyxTQVUzQjtBQUNMLHVCQUFtQiwyQkFBVSxJQUFWLEVBQWdCO0FBQ2pDLHNCQUFnQixPQUFoQixFQUF5QixJQUF6QixFQUErQixZQUEvQixFQUE2QyxJQUE3QyxFQUFtRCxLQUFLLE1BQUwsQ0FBWSxLQUFaLENBQW5ELENBRGlDO0tBQWhCO0FBR25CLG9CQUFnQixTQUFTLGNBQVQsQ0FBd0IsSUFBeEIsRUFBOEI7QUFDNUMsVUFBSSw2QkFBZ0IsSUFBaEIsQ0FBSixFQUEyQjtBQUN6Qix3QkFBZ0IsT0FBaEIsRUFBeUIsSUFBekIsRUFBK0IsWUFBL0IsRUFBNkMsSUFBN0MsRUFBbUQsS0FBSyxTQUFMLENBQWUsQ0FBZixFQUFrQixLQUFsQixDQUFuRCxDQUR5QjtPQUEzQjtLQURjO0dBSmxCLENBVmtDO0NBQW5COztBQXNCakIsT0FBTyxPQUFQLENBQWUsTUFBZixHQUF3QixDQUN0QjtBQUNFLFVBQVEsUUFBUjtBQUNBLGdCQUFjO0FBQ1osdUJBQW1CLEVBQUUsUUFBUSxTQUFSLEVBQXJCO0dBREY7QUFHQSwwQkFBd0IsS0FBeEI7Q0FOb0IsQ0FBeEIiLCJmaWxlIjoicnVsZXMvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgcGtnVXAgZnJvbSAncGtnLXVwJ1xuaW1wb3J0IGltcG9ydFR5cGUgZnJvbSAnLi4vY29yZS9pbXBvcnRUeXBlJ1xuaW1wb3J0IGlzU3RhdGljUmVxdWlyZSBmcm9tICcuLi9jb3JlL3N0YXRpY1JlcXVpcmUnXG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhjb250ZXh0KSB7XG4gIGNvbnN0IGZpbGVwYXRoID0gcGtnVXAuc3luYyhjb250ZXh0LmdldEZpbGVuYW1lKCkpXG4gIGlmICghZmlsZXBhdGgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBwYWNrYWdlQ29udGVudCA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGZpbGVwYXRoLCAndXRmOCcpKVxuICAgIHJldHVybiB7XG4gICAgICBkZXBlbmRlbmNpZXM6IHBhY2thZ2VDb250ZW50LmRlcGVuZGVuY2llcyB8fCB7fSxcbiAgICAgIGRldkRlcGVuZGVuY2llczogcGFja2FnZUNvbnRlbnQuZGV2RGVwZW5kZW5jaWVzIHx8IHt9LFxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuZnVuY3Rpb24gbWlzc2luZ0Vycm9yTWVzc2FnZShwYWNrYWdlTmFtZSkge1xuICByZXR1cm4gYCcke3BhY2thZ2VOYW1lfScgaXMgbm90IGxpc3RlZCBpbiB0aGUgcHJvamVjdCdzIGRlcGVuZGVuY2llcy4gYCArXG4gIGBSdW4gJ25wbSBpIC1TICR7cGFja2FnZU5hbWV9JyB0byBhZGQgaXRgXG59XG5cbmZ1bmN0aW9uIGRldkRlcEVycm9yTWVzc2FnZShwYWNrYWdlTmFtZSkge1xuICByZXR1cm4gYCcke3BhY2thZ2VOYW1lfScgaXMgbm90IGxpc3RlZCBpbiB0aGUgcHJvamVjdCdzIGRlcGVuZGVuY2llcywgbm90IGRldkRlcGVuZGVuY2llcy5gXG59XG5cbmZ1bmN0aW9uIHJlcG9ydElmTWlzc2luZyhjb250ZXh0LCBkZXBzLCBhbGxvd0RldkRlcHMsIG5vZGUsIG5hbWUpIHtcbiAgaWYgKGltcG9ydFR5cGUobmFtZSwgY29udGV4dCkgIT09ICdleHRlcm5hbCcpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBwYWNrYWdlTmFtZSA9IG5hbWUuc3BsaXQoJy8nKVswXVxuXG4gIGlmIChkZXBzLmRlcGVuZGVuY2llc1twYWNrYWdlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghYWxsb3dEZXZEZXBzKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydChub2RlLCBkZXZEZXBFcnJvck1lc3NhZ2UocGFja2FnZU5hbWUpKVxuICAgIH0gZWxzZSBpZiAoZGVwcy5kZXZEZXBlbmRlbmNpZXNbcGFja2FnZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0KG5vZGUsIG1pc3NpbmdFcnJvck1lc3NhZ2UocGFja2FnZU5hbWUpKVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnNbMF0gfHwge31cbiAgY29uc3QgYWxsb3dEZXZEZXBzID0gb3B0aW9ucy5kZXZEZXBlbmRlbmNpZXMgIT09IGZhbHNlXG4gIGNvbnN0IGRlcHMgPSBnZXREZXBlbmRlbmNpZXMoY29udGV4dClcblxuICBpZiAoIWRlcHMpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuXG4gIC8vIHRvZG86IHVzZSBtb2R1bGUgdmlzaXRvciBmcm9tIG1vZHVsZS11dGlscyBjb3JlXG4gIHJldHVybiB7XG4gICAgSW1wb3J0RGVjbGFyYXRpb246IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICByZXBvcnRJZk1pc3NpbmcoY29udGV4dCwgZGVwcywgYWxsb3dEZXZEZXBzLCBub2RlLCBub2RlLnNvdXJjZS52YWx1ZSlcbiAgICB9LFxuICAgIENhbGxFeHByZXNzaW9uOiBmdW5jdGlvbiBoYW5kbGVSZXF1aXJlcyhub2RlKSB7XG4gICAgICBpZiAoaXNTdGF0aWNSZXF1aXJlKG5vZGUpKSB7XG4gICAgICAgIHJlcG9ydElmTWlzc2luZyhjb250ZXh0LCBkZXBzLCBhbGxvd0RldkRlcHMsIG5vZGUsIG5vZGUuYXJndW1lbnRzWzBdLnZhbHVlKVxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuc2NoZW1hID0gW1xuICB7XG4gICAgJ3R5cGUnOiAnb2JqZWN0JyxcbiAgICAncHJvcGVydGllcyc6IHtcbiAgICAgICdkZXZEZXBlbmRlbmNpZXMnOiB7ICd0eXBlJzogJ2Jvb2xlYW4nIH0sXG4gICAgfSxcbiAgICAnYWRkaXRpb25hbFByb3BlcnRpZXMnOiBmYWxzZSxcbiAgfSxcbl1cbiJdfQ==